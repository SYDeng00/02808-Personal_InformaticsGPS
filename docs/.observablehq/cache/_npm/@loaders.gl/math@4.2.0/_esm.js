/**
 * Bundled by jsDelivr using Rollup v2.79.1 and Terser v5.19.2.
 * Original file: /npm/@loaders.gl/math@4.2.0/dist/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{assert as t}from"../loader-utils@4.2.0/_esm.js";import{Vector3 as r,Vector2 as n,_MathUtils as e,clamp as o}from"../../@math.gl/core@4.0.1/_esm.js";const a={BYTE:5120,UNSIGNED_BYTE:5121,SHORT:5122,UNSIGNED_SHORT:5123,INT:5124,UNSIGNED_INT:5125,FLOAT:5126,DOUBLE:5130},i={POINTS:0,LINES:1,LINE_LOOP:2,LINE_STRIP:3,TRIANGLES:4,TRIANGLE_STRIP:5,TRIANGLE_FAN:6,...a},s={[a.DOUBLE]:Float64Array,[a.FLOAT]:Float32Array,[a.UNSIGNED_SHORT]:Uint16Array,[a.UNSIGNED_INT]:Uint32Array,[a.UNSIGNED_BYTE]:Uint8Array,[a.BYTE]:Int8Array,[a.SHORT]:Int16Array,[a.INT]:Int32Array},u={DOUBLE:a.DOUBLE,FLOAT:a.FLOAT,UNSIGNED_SHORT:a.UNSIGNED_SHORT,UNSIGNED_INT:a.UNSIGNED_INT,UNSIGNED_BYTE:a.UNSIGNED_BYTE,BYTE:a.BYTE,SHORT:a.SHORT,INT:a.INT},c="Failed to convert GL type";class f{static fromTypedArray(t){t=ArrayBuffer.isView(t)?t.constructor:t;for(const r in s){if(s[r]===t)return r}throw new Error(c)}static fromName(t){const r=u[t];if(!r)throw new Error(c);return r}static getArrayType(t){switch(t){case a.UNSIGNED_SHORT_5_6_5:case a.UNSIGNED_SHORT_4_4_4_4:case a.UNSIGNED_SHORT_5_5_5_1:return Uint16Array;default:const r=s[t];if(!r)throw new Error(c);return r}}static getByteSize(t){return f.getArrayType(t).BYTES_PER_ELEMENT}static validate(t){return Boolean(f.getArrayType(t))}static createTypedArray(t,r,n=0,e){void 0===e&&(e=(r.byteLength-n)/f.getByteSize(t));return new(f.getArrayType(t))(r,n,e)}}function N(t){return t&&"object"==typeof t&&t.mode&&t.attributes&&"object"==typeof t.attributes}function*y(t,r){const n=new(0,t.constructor)(r);for(let e=0;e<t.length;e+=r){for(let t=0;t<r;t++)n[t]=n[e+t];yield n}}function E(t){switch(t){case i.POINTS:return i.POINTS;case i.LINES:case i.LINE_STRIP:case i.LINE_LOOP:return i.LINES;case i.TRIANGLES:case i.TRIANGLE_STRIP:case i.TRIANGLE_FAN:return i.TRIANGLES;default:throw new Error("Unknown primitive mode")}}function*I(r,n={},e,o=0,a){r&&(r=r.values||r.value||r),void 0===a&&(a=r?r.length:o);const s={attributes:n,type:E(e),i1:0,i2:0,i3:0};let u=o;for(;u<a;){switch(e){case i.POINTS:s.i1=u,u+=1;break;case i.LINES:s.i1=u,s.i2=u+1,u+=2;break;case i.LINE_STRIP:case i.LINE_LOOP:s.i1=u,s.i2=u+1,u+=1;break;case i.TRIANGLES:s.i1=u,s.i2=u+1,s.i3=u+2,u+=3;break;case i.TRIANGLE_STRIP:s.i1=u,s.i2=u+1,u+=1;break;case i.TRIANGLE_FAN:s.i1=1,s.i2=u,s.i3=u+1,u+=1;break;default:t(!1)}r&&"i1"in s&&(s.i1=r[s.i1],s.i2=r[s.i2],s.i3=r[s.i3]),yield s}}function T(t,r){if(!t)throw new Error(`math.gl assertion failed. ${r}`)}function l(t){T(E(t.mode)===i.TRIANGLES,"TRIANGLES required");const{values:n}=function(t){if(N(t)){const{attributes:r}=t,n=r.POSITION||r.positions;return T(n),n}return ArrayBuffer.isView(t)?{values:t,size:3}:t?(T(t.values),t):T(!1)}(t),e=new Float32Array(n.length),o=new r,a=new r,s=new r,u=new r,c=new r;for(const r of I(t)){o.fromArray(n,3*r.i1),a.fromArray(n,3*r.i2+3),s.fromArray(n,3*r.i3+6),u.subVectors(s,a),c.subVectors(o,a);const t=u.cross(c);t.normalize();const{primitiveIndex:i}=r;e[9*i+0]=t.x,e[9*i+1]=t.y,e[9*i+2]=t.z,e[9*i+3]=t.x,e[9*i+4]=t.y,e[9*i+5]=t.z,e[9*i+6]=t.x,e[9*i+7]=t.y,e[9*i+8]=t.z}return e}function S(t,r=[0,0,0]){const n=t>>11&31,e=t>>5&63,o=31&t;return r[0]=n<<3,r[1]=e<<2,r[2]=o<<3,r}function h(t){return Math.floor(t[0]/8)+4+(Math.floor(t[1]/4)+2<<5)+(Math.floor(t[2]/8)+4<<11)}function A(t=[]){let r=0;for(let n=0;n<t.length;++n)r+=t[n].byteLength;const n=new Uint8Array(r);let e=0;for(let o=0;o<t.length;++o){const a=new Uint8Array(t[o].buffer);r=a.length;for(let t=0;t<r;++t)n[e++]=a[t]}return n}const w=1/256,_=new n,L=new r,b=new n,O=new n,d=new Uint8Array(1);function m(t){return d[0]=t,d[0]}function x(t,r=255){return o(t,0,r)/r*2-1}function R(t,r=255){return Math.round((.5*o(t,-1,1)+.5)*r)}function G(t){return t<0?-1:1}function g(t,r,n){T(t),T(n);const o=L.from(t);if(T(Math.abs(o.magnitudeSquared()-1)<=e.EPSILON6),n.x=t.x/(Math.abs(t.x)+Math.abs(t.y)+Math.abs(t.z)),n.y=t.y/(Math.abs(t.x)+Math.abs(t.y)+Math.abs(t.z)),t.z<0){const t=n.x,r=n.y;n.x=(1-Math.abs(r))*G(t),n.y=(1-Math.abs(t))*G(r)}return n.x=R(n.x,r),n.y=R(n.y,r),n}function U(t,r){return g(t,255,r)}function M(t,r){return g(t,65535,O),r.x=m(O.x*w),r.y=m(O.x),r.z=m(O.y*w),r.w=m(O.y),r}function p(t,r,n,e){if(T(e),t<0||t>n||r<0||r>n)throw new Error(`x and y must be unsigned normalized integers between 0 and ${n}`);if(e.x=x(t,n),e.y=x(r,n),e.z=1-(Math.abs(e.x)+Math.abs(e.y)),e.z<0){const t=e.x;e.x=(1-Math.abs(e.y))*G(t),e.y=(1-Math.abs(t))*G(e.y)}return e.normalize()}function D(t,r,n){return p(t,r,255,n)}function z(t,r){T(t),T(r);const n=t.x,e=t.y,o=t.z,a=t.w;if(n<0||n>255||e<0||e>255||o<0||o>255||a<0||a>255)throw new Error("x, y, z, and w must be unsigned normalized integers between 0 and 255");return p(256*n+e,256*o+a,65535,r)}function B(t){const r=_.from(t);return 256*r.x+r.y}function P(t){return U(t,b),B(b)}function F(t,r){T(Number.isFinite(t));const n=t/256,e=Math.floor(n);return D(e,256*(n-e),r)}function v(t,r,n,e){T(t),T(r),T(n),T(e);const o=P(t),a=P(r),i=U(n,b);return e.x=65536*i.x+o,e.y=65536*i.y+a,e}function H(t,r,n,e){let o=t.x/65536;const a=Math.floor(o),i=65536*(o-a);o=t.y/65536;const s=Math.floor(o),u=65536*(o-s);F(i,r),F(u,n),D(a,s,e)}function Y(t){return 4096*(4095*t.x|0)+(4095*t.y|0)}function k(t,r){const n=t/4096,e=Math.floor(n);return r.x=e/4095,r.y=(t-4096*e)/4095,r}function V(t,r,n){function e(t){return t>>1^-(1&t)}T(t),T(r),T(t.length===r.length),n&&T(t.length===n.length);let o=0,a=0,i=0;for(let s=0;s<t.length;++s)o+=e(t[s]),a+=e(r[s]),t[s]=o,r[s]=a,n&&(i+=e(n[s]),n[s]=i)}function j(t){return(t%1+1)%1}export{i as GL,f as GLType,a as GL_TYPE,Y as compressTextureCoordinates,l as computeVertexNormals,A as concatTypedArrays,S as decodeRGB565,k as decompressTextureCoordinates,j as emod,h as encodeRGB565,N as isGeometry,y as makeAttributeIterator,I as makePrimitiveIterator,D as octDecode,F as octDecodeFloat,z as octDecodeFromVector4,p as octDecodeInRange,U as octEncode,P as octEncodeFloat,g as octEncodeInRange,M as octEncodeToVector4,v as octPack,B as octPackFloat,H as octUnpack,V as zigZagDeltaDecode};export default null;
