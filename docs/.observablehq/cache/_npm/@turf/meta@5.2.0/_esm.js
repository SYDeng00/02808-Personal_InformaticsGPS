/**
 * Bundled by jsDelivr using Rollup v2.79.1 and Terser v5.19.2.
 * Original file: /npm/@turf/meta@5.2.0/main.es.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{feature as e,lineString as t,isObject as r,point as n}from"../helpers@5.1.5/_esm.js";function o(e,t,r){if(null!==e)for(var n,i,l,u,a,s,c,g,f=0,y=0,h=e.type,p="FeatureCollection"===h,v="Feature"===h,d=p?e.features.length:1,P=0;P<d;P++){a=(g=!!(c=p?e.features[P].geometry:v?e.geometry:e)&&"GeometryCollection"===c.type)?c.geometries.length:1;for(var m=0;m<a;m++){var w=0,M=0;if(null!==(u=g?c.geometries[m]:c)){s=u.coordinates;var b=u.type;switch(f=!r||"Polygon"!==b&&"MultiPolygon"!==b?0:1,b){case null:break;case"Point":if(!1===t(s,y,P,w,M))return!1;y++,w++;break;case"LineString":case"MultiPoint":for(n=0;n<s.length;n++){if(!1===t(s[n],y,P,w,M))return!1;y++,"MultiPoint"===b&&w++}"LineString"===b&&w++;break;case"Polygon":case"MultiLineString":for(n=0;n<s.length;n++){for(i=0;i<s[n].length-f;i++){if(!1===t(s[n][i],y,P,w,M))return!1;y++}"MultiLineString"===b&&w++,"Polygon"===b&&M++}"Polygon"===b&&w++;break;case"MultiPolygon":for(n=0;n<s.length;n++){for("MultiPolygon"===b&&(M=0),i=0;i<s[n].length;i++){for(l=0;l<s[n][i].length-f;l++){if(!1===t(s[n][i][l],y,P,w,M))return!1;y++}M++}w++}break;case"GeometryCollection":for(n=0;n<u.geometries.length;n++)if(!1===o(u.geometries[n],t,r))return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function i(e,t,r,n){var i=r;return o(e,(function(e,n,o,l,u){i=0===n&&void 0===r?e:t(i,e,n,o,l,u)}),n),i}function l(e,t){var r;switch(e.type){case"FeatureCollection":for(r=0;r<e.features.length&&!1!==t(e.features[r].properties,r);r++);break;case"Feature":t(e.properties,0)}}function u(e,t,r){var n=r;return l(e,(function(e,o){n=0===o&&void 0===r?e:t(n,e,o)})),n}function a(e,t){if("Feature"===e.type)t(e,0);else if("FeatureCollection"===e.type)for(var r=0;r<e.features.length&&!1!==t(e.features[r],r);r++);}function s(e,t,r){var n=r;return a(e,(function(e,o){n=0===o&&void 0===r?e:t(n,e,o)})),n}function c(e){var t=[];return o(e,(function(e){t.push(e)})),t}function g(e,t){var r,n,o,i,l,u,a,s,c,g,f=0,y="FeatureCollection"===e.type,h="Feature"===e.type,p=y?e.features.length:1;for(r=0;r<p;r++){for(u=y?e.features[r].geometry:h?e.geometry:e,s=y?e.features[r].properties:h?e.properties:{},c=y?e.features[r].bbox:h?e.bbox:void 0,g=y?e.features[r].id:h?e.id:void 0,l=(a=!!u&&"GeometryCollection"===u.type)?u.geometries.length:1,o=0;o<l;o++)if(null!==(i=a?u.geometries[o]:u))switch(i.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":if(!1===t(i,f,s,c,g))return!1;break;case"GeometryCollection":for(n=0;n<i.geometries.length;n++)if(!1===t(i.geometries[n],f,s,c,g))return!1;break;default:throw new Error("Unknown Geometry Type")}else if(!1===t(null,f,s,c,g))return!1;f++}}function f(e,t,r){var n=r;return g(e,(function(e,o,i,l,u){n=0===o&&void 0===r?e:t(n,e,o,i,l,u)})),n}function y(t,r){g(t,(function(t,n,o,i,l){var u,a=null===t?null:t.type;switch(a){case null:case"Point":case"LineString":case"Polygon":return!1!==r(e(t,o,{bbox:i,id:l}),n,0)&&void 0}switch(a){case"MultiPoint":u="Point";break;case"MultiLineString":u="LineString";break;case"MultiPolygon":u="Polygon"}for(var s=0;s<t.coordinates.length;s++){var c=t.coordinates[s];if(!1===r(e({type:u,coordinates:c},o),n,s))return!1}}))}function h(e,t,r){var n=r;return y(e,(function(e,o,i){n=0===o&&0===i&&void 0===r?e:t(n,e,o,i)})),n}function p(e,r){y(e,(function(e,n,i){var l=0;if(e.geometry){var u,a=e.geometry.type;if("Point"!==a&&"MultiPoint"!==a)return!1!==o(e,(function(o,a,s,c,g){if(void 0!==u){var f=t([u,o],e.properties);if(!1===r(f,n,i,g,l))return!1;l++,u=o}else u=o}))&&void 0}}))}function v(e,t,r){var n=r,o=!1;return p(e,(function(e,i,l,u,a){n=!1===o&&void 0===r?e:t(n,e,i,l,u,a),o=!0})),n}function d(e,r){if(!e)throw new Error("geojson is required");y(e,(function(e,n,o){if(null!==e.geometry){var i=e.geometry.type,l=e.geometry.coordinates;switch(i){case"LineString":if(!1===r(e,n,o,0,0))return!1;break;case"Polygon":for(var u=0;u<l.length;u++)if(!1===r(t(l[u],e.properties),n,o,u))return!1}}}))}function P(e,t,r){var n=r;return d(e,(function(e,o,i,l){n=0===o&&void 0===r?e:t(n,e,o,i,l)})),n}function m(e,n){if(!r(n=n||{}))throw new Error("options is invalid");var o,i=n.featureIndex||0,l=n.multiFeatureIndex||0,u=n.geometryIndex||0,a=n.segmentIndex||0,s=n.properties;switch(e.type){case"FeatureCollection":i<0&&(i=e.features.length+i),s=s||e.features[i].properties,o=e.features[i].geometry;break;case"Feature":s=s||e.properties,o=e.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":o=e;break;default:throw new Error("geojson is invalid")}if(null===o)return null;var c=o.coordinates;switch(o.type){case"Point":case"MultiPoint":return null;case"LineString":return a<0&&(a=c.length+a-1),t([c[a],c[a+1]],s,n);case"Polygon":return u<0&&(u=c.length+u),a<0&&(a=c[u].length+a-1),t([c[u][a],c[u][a+1]],s,n);case"MultiLineString":return l<0&&(l=c.length+l),a<0&&(a=c[l].length+a-1),t([c[l][a],c[l][a+1]],s,n);case"MultiPolygon":return l<0&&(l=c.length+l),u<0&&(u=c[l].length+u),a<0&&(a=c[l][u].length-a-1),t([c[l][u][a],c[l][u][a+1]],s,n)}throw new Error("geojson is invalid")}function w(e,t){if(!r(t=t||{}))throw new Error("options is invalid");var o,i=t.featureIndex||0,l=t.multiFeatureIndex||0,u=t.geometryIndex||0,a=t.coordIndex||0,s=t.properties;switch(e.type){case"FeatureCollection":i<0&&(i=e.features.length+i),s=s||e.features[i].properties,o=e.features[i].geometry;break;case"Feature":s=s||e.properties,o=e.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":o=e;break;default:throw new Error("geojson is invalid")}if(null===o)return null;var c=o.coordinates;switch(o.type){case"Point":return n(c,s,t);case"MultiPoint":return l<0&&(l=c.length+l),n(c[l],s,t);case"LineString":return a<0&&(a=c.length+a),n(c[a],s,t);case"Polygon":return u<0&&(u=c.length+u),a<0&&(a=c[u].length+a),n(c[u][a],s,t);case"MultiLineString":return l<0&&(l=c.length+l),a<0&&(a=c[l].length+a),n(c[l][a],s,t);case"MultiPolygon":return l<0&&(l=c.length+l),u<0&&(u=c[l].length+u),a<0&&(a=c[l][u].length-a),n(c[l][u][a],s,t)}throw new Error("geojson is invalid")}export{c as coordAll,o as coordEach,i as coordReduce,a as featureEach,s as featureReduce,w as findPoint,m as findSegment,y as flattenEach,h as flattenReduce,g as geomEach,f as geomReduce,d as lineEach,P as lineReduce,l as propEach,u as propReduce,p as segmentEach,v as segmentReduce};export default null;
